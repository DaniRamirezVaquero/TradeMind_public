import {
  Component,
  OnInit,
  OnDestroy,
  Input,
  ViewChild,
  ElementRef,
  HostListener,
} from '@angular/core';
import { DarkModeToggleComponent } from '../dark-mode-toggle/dark-mode-toggle.component';
import { CommonModule } from '@angular/common';
import { ChatService } from '../../services/chat.service';
import { Subscription } from 'rxjs';
import { TypewriterDirective } from '../../directives/typewriter.directive';
import { PopoverModule } from 'primeng/popover';
import { MarkdownModule } from 'ngx-markdown';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [
    CommonModule,
    DarkModeToggleComponent,
    TypewriterDirective,
    PopoverModule,
    MarkdownModule,
  ],

  templateUrl: './header.component.html',
  styleUrl: './header.component.css',
  animations: [
    trigger('popoverAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(-10px) scale(0.95)' }),
        animate('200ms ease-out', style({ opacity: 1, transform: 'translateY(0) scale(1)' }))
      ]),
      transition(':leave', [
        animate('150ms ease-in', style({ opacity: 0, transform: 'translateY(-5px) scale(0.98)' }))
      ])
    ])
  ]
})
export class HeaderComponent implements OnInit, OnDestroy {
  @Input() isDrawerOpen: boolean = false;
  @ViewChild('trademindButton') trademindButton!: ElementRef;
  isCustomPopoverVisible = false;
  popoverPosition = { top: 0, left: 0 };
  currentChatTitle: string = '';
  animateTitle: boolean = false;
  private subscriptions: Subscription[] = [];
  private currentChatId: string | null = null;

  popoverContent = `### ¿Qué puedo hacer por ti?

  * 📊 **Consultar el valor de tu smartphone**

    Te diré cuánto podría valer tu dispositivo actual según su estado

  * 🔎 **Recomendarte un smartphone**

    Sugiero modelos que se ajusten a tu presupuesto y necesidades

  * 📈 **Mostrarte gráficas de precios**

    Analiza la evolución del valor de un dispositivo en el tiempo

  * ❓ **Responder tus dudas**

    Sobre el mercado de smartphones reacondicionados

  ### ¿Cómo empezar?

  * Para **vender tu smartphone**: Cuéntame qué modelo tienes, su estado y almacenamiento
  * Para **comprar un dispositivo**: Indícame tu presupuesto y preferencias
  * Para **ver gráficas**: Pregúntame por la evolución de precio de cualquier modelo
  `;

  constructor(private chatService: ChatService) {}

  toggleCustomPopover(event: MouseEvent) {
    // Prevenir propagación para evitar cerrar inmediatamente
    event.stopPropagation();

    this.isCustomPopoverVisible = !this.isCustomPopoverVisible;

    if (this.isCustomPopoverVisible) {
      // Retrasar cálculo para asegurar que el DOM esté actualizado
      setTimeout(() => {
        const buttonRect = this.trademindButton.nativeElement.getBoundingClientRect();
        const popoverWidth = 400; // Ancho aproximado del popover en píxeles

        // Centrar el popover bajo el botón
        let leftPosition = buttonRect.left + (buttonRect.width / 2) - (popoverWidth / 2);

        // Prevenir que el popover se salga de la pantalla
        const rightEdge = leftPosition + popoverWidth;
        const screenWidth = window.innerWidth;

        if (rightEdge > screenWidth - 20) {
          leftPosition = screenWidth - 20 - popoverWidth;
        }
        if (leftPosition < 20) {
          leftPosition = 20;
        }

        this.popoverPosition = {
          top: buttonRect.bottom + 15, // Un poco más de espacio para la flecha
          left: leftPosition
        };
      });
    }
  }

  // Asegúrate de cerrar el popover al hacer clic fuera
  @HostListener('document:click', ['$event'])
  onClick(event: MouseEvent) {
    // Solo cerrar si está abierto, el clic no es en el botón, y no es el clic que lo abrió
    if (
      this.isCustomPopoverVisible &&
      this.trademindButton &&
      !this.trademindButton.nativeElement.contains(event.target)
    ) {
      this.isCustomPopoverVisible = false;
    }
  }

  ngOnInit() {
    // Subscribe to current chat ID changes
    this.subscriptions.push(
      this.chatService.currentChatId$.subscribe((chatId) => {
        if (chatId && chatId !== this.currentChatId) {
          this.currentChatId = chatId;
          // We need to fetch the title for this chat
          this.updateTitleFromChatId(chatId);
        }
      })
    );

    // Subscribe to title updates
    this.subscriptions.push(
      this.chatService.chatTitleUpdate$.subscribe(
        ({ chatId, title, isAutoGenerated }) => {
          // Only update if this is for the current chat
          if (chatId === this.currentChatId) {
            this.currentChatTitle = title;
            // Animate only if it's an auto-generated title
            this.animateTitle = isAutoGenerated;

            // Reset animation after some time
            if (isAutoGenerated) {
              setTimeout(() => {
                this.animateTitle = false;
              }, 6000); // A bit longer than the animation to ensure it completes
            }
          }
        }
      )
    );
  }

  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }

  private async updateTitleFromChatId(chatId: string) {
    try {
      const title = await this.chatService.getChatTitle(chatId);
      this.currentChatTitle = title;
      this.animateTitle = false; // Don't animate when just switching chats
    } catch (error) {
      console.error('Error fetching chat title:', error);
      this.currentChatTitle = 'Chat';
    }
  }
}

