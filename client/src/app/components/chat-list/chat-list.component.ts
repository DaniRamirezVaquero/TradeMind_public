import {
  Component,
  EventEmitter,
  Input,
  OnDestroy,
  OnInit,
  Output,
  ViewChild,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ButtonModule } from 'primeng/button';
import { TooltipModule } from 'primeng/tooltip';
import { RippleModule } from 'primeng/ripple';
import { DialogModule } from 'primeng/dialog'; // Importar DialogModule en lugar de PopoverModule
import { InputTextModule } from 'primeng/inputtext';
import { ChatSession } from '../../interfaces/chat-session';
import { TypewriterDirective } from '../../directives/typewriter.directive';
import { Subscription } from 'rxjs';
import { ChatService } from '../../services/chat.service';
import { ProgressSpinnerModule } from 'primeng/progressspinner';

@Component({
  selector: 'app-chat-list',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ButtonModule,
    TooltipModule,
    RippleModule,
    DialogModule,
    InputTextModule,
    TypewriterDirective,
    ProgressSpinnerModule
  ],
  templateUrl: './chat-list.component.html',
  styleUrl: './chat-list.component.css',
})
export class ChatListComponent implements OnInit, OnDestroy {
  animatingTitles: { [key: string]: boolean } = {};

  @Input() chats: ChatSession[] = [];
  @Input() selectedChatId: string | null = null;

  @Output() chatSelected = new EventEmitter<string>();
  @Output() newChatRequested = new EventEmitter<void>();
  @Output() chatDeleted = new EventEmitter<string>();
  @Output() chatRenamed = new EventEmitter<{ id: string; title: string }>();

  private subscriptions: Subscription[] = [];

  // Variables para controlar la edición de título
  editingChatId: string | null = null;
  editedTitle: string = '';
  displayEditDialog: boolean = false; // Controla la visibilidad del diálogo
  isBackendInitializing: boolean = true;

  constructor(private chatService: ChatService) {}

  ngOnInit() {
    // Subscribe to title updates using the Angular service

    const chatTitleSubscription = this.chatService.chatTitleUpdate$.subscribe(
      ({ chatId, title, isAutoGenerated }) => {
        // If this is an auto-generated title update, animate it
        if (isAutoGenerated) {
          this.startTitleAnimation(chatId);
        }
      }
    );

    const backendStatusSubscription =
      this.chatService.backendInitializing$.subscribe((initializing) => {
        this.isBackendInitializing = initializing;
      });

    this.subscriptions.push(chatTitleSubscription, backendStatusSubscription);
  }

  ngOnDestroy() {
    // Clean up all subscriptions
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }

  selectChat(id: string): void {
    this.chatSelected.emit(id);
  }

  createNewChat(): void {
    this.newChatRequested.emit();
  }

  // Método para abrir el diálogo de edición
  editChatTitle(event: Event, id: string): void {
    event.stopPropagation();

    this.chatRenamed.emit({ id, title: '' });
  }

  deleteChat(event: Event, id: string): void {
    event.stopPropagation();
    this.chatDeleted.emit(id);
  }

  // Formatear fecha relativa (hoy, ayer, etc.)
  formatDate(date: Date): string {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const chatDate = new Date(
      date.getFullYear(),
      date.getMonth(),
      date.getDate()
    );

    const diffDays = Math.round(
      (today.getTime() - chatDate.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (diffDays === 0) return 'Hoy';
    if (diffDays === 1) return 'Ayer';
    if (diffDays < 7) return `Hace ${diffDays} días`;

    return date.toLocaleDateString();
  }

  // Método para marcar un título como animado
  startTitleAnimation(chatId: string): void {
    this.animatingTitles[chatId] = true;

    // Después de un tiempo, desactivar la animación
    setTimeout(() => {
      this.animatingTitles[chatId] = false;
    }, 5000);
  }

  // Método para comprobar si un título se está animando
  isTitleAnimating(chatId: string): boolean {
    return !!this.animatingTitles[chatId];
  }

  isChatTokenLimited(chatId: string): boolean {
    return this.chatService.isChatTokenLimited(chatId);
  }
}
